html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  background-color: hsl(42, 100%, 96%);
}

body > h1 {
  text-align: center;
  padding: 20px 0;
  box-shadow: 0px 1px 10px rgba(0, 0, 0, 0.959);
  background-color: hsl(25, 26%, 56%);
  color: white;
  font-size: 80px;
  -webkit-text-stroke: 2px black;
  user-select: none;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-template-rows: repeat(auto-fit, minmax(300px, 300px));
  width: 80%;
  margin: 0 auto;
  gap: 40px;
  margin-top: 40px;
}

.card {
  border: solid;
  border-radius: 20px;
  border-color: gray;
  border-width: 2px;
  padding: 40px;
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
  background-color: hsl(57, 68%, 94%);
  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.534);
  transition: transform 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
}

.card:hover {
  transform: scale(1.03);
  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.959);
}

.book_ID {
  position: absolute;
  top: 8px;
  left: 12px;
  color: rgb(151, 151, 151);
}

.book_title {
  font-size: 24px;
  font-weight: 900;
  width: 100%;
  text-align: center;
}

.book_title p {
  word-wrap: break-word; /* breaks long words */
  overflow-wrap: break-word; /* ensures compatibility */
  white-space: normal; /* allows wrapping */
}

.book_pageCount {
  position: absolute;
  bottom: 8px;
  left: 12px;
}

.book_hasRead {
  display: flex;
  flex-direction: row;
  gap: 2px;
  position: absolute;
  bottom: 8px;
  right: 12px;
}

.checkmark {
  width: 20px;
  height: 20px;
  accent-color: hsl(57, 25%, 85%);
}

button.book_remove {
  position: absolute;
  top: 8px;
  right: 12px;
  border: none;
  background-color: hsl(57, 25%, 85%);
  padding: 3px;
  border-radius: 8px;
}

button.book_remove:hover {
  background-color: hsl(60, 13%, 74%);
}

.book_add {
  background-color: hsla(57, 30%, 86%, 0.445);
  transition: transform 0.4s ease-in-out, box-shadow 0.4s ease-in-out,
    background-color 0.4s ease-in-out;
  cursor: pointer;
}

.book_add:hover {
  background-color: hsl(57, 100%, 96%);
}

.add_button {
  margin: auto;
  background-color: hsl(57, 25%, 85%);
  width: 80px;
  height: 80px;
  border-radius: 50%;
  color: rgba(0, 0, 0, 0.247);
  font-weight: 200;
  font-size: 4rem;
  cursor: pointer;
  user-select: none;
}

/* Open state of the dialog  */
dialog:open {
  opacity: 1;
  transform: scaleY(1);
}

/* Closed state of the dialog   */
dialog {
  opacity: 0;
  transform: scaleY(0);
  transition: opacity 0.7s ease-out, transform 0.7s ease-out,
    overlay 0.7s ease-out allow-discrete, display 0.7s ease-out allow-discrete;
  margin: auto;
  background-color: hsl(42, 100%, 96%);
  padding: 200px;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

dialog h1 {
  border-bottom: 1px solid rgba(0, 0, 0, 0.315);
  margin-bottom: 20px;
}

/* Before open state  */
/* Needs to be after the previous dialog:open rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog:open {
    opacity: 0;
    transform: scaleY(0);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition: display 0.7s allow-discrete, overlay 0.7s allow-discrete,
    background-color 0.7s;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

dialog:open::backdrop {
  background-color: rgb(0 0 0 / 25%);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog:open::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}
